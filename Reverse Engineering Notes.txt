Instruction : A primitive CPU command. The simplest examples include: moving data between registers,
working with memory, primitive arithmetic operations. As a rule, each CPU has its own instruction
set architecture (ISA).
Machine code : Code that the CPU directly processes. Each instruction is usually encoded by several
bytes.
Assembly language : Mnemonic code and some extensions, like macros, that are intended to make a
programmer’s life easier.
CPU register : Each CPU has a fixed set of general purpose registers (GPR2). ≈ 8 in x86, ≈ 16 in x86-
64, and also ≈ 16 in ARM. The easiest way to understand a register is to think of it as an untyped
temporary variable. Imagine if you were working with a high-level PL and could only use eight 32-bit
(or 64-bit) variables. Yet a lot can be done using just these!
The program that converts the high-level PL code into assembly is called a compiler.
Reduced Instruction Set Computing= RISC
ISA= instruction set architecture
ARM is a RISC4 CPU designed with
constant-length instructions in mind, which had some advantages in the past. In the very beginning, all
ARM instructions were encoded in 4 bytes5. This is now referred to as “ARM mode”.
They therefore added another ISA, called Thumb, in which
each instruction was encoded in just 2 bytes. This is now referred to as “Thumb mode”.
There is a common misconception that Thumb-2 is a mix of ARM and Thumb. This is incorrect. Rather, Thumb-2
was extended to fully support all processor features so it could compete with ARM mode—a goal that
was clearly achieved, as the majority of applications for iPod/iPhone/iPad are compiled for the Thumb-2
instruction set.
If the numeral system has 10 digits, it has a radix (or base) of 10. The binary numeral system has a radix
of 2.
Important things to recall:
1) A number is a number, while a digit is a term from writing systems, and is usually one character
2) The value of a number does not change when converted to another radix; only the writing notation for
that value has changed (and therefore the way of representing it in RAM7).
1.2.3 Converting From One Radix To Another
Positional notation is used in almost every numerical system. This means that a digit has weight relative
to where it is placed inside of the larger number. If 2 is placed at the rightmost place, it’s 2, but if it’s
placed one digit before rightmost, it’s 20.
What does 1234 stand for?
103 ⋅ 1 + 102 ⋅ 2 + 101 ⋅ 3 + 1 ⋅ 4 = 1234 or 1000 ⋅ 1 + 100 ⋅ 2 + 10 ⋅ 3 + 4 = 1234
It’s the same story for binary numbers, but the base is 2 instead of 10. What does 0b101011 stand for?
25 ⋅ 1 + 24 ⋅ 0 + 23 ⋅ 1 + 22 ⋅ 0 + 21 ⋅ 1 + 20 ⋅ 1 = 43 or 32 ⋅ 1 + 16 ⋅ 0 + 8 ⋅ 1 + 4 ⋅ 0 + 2 ⋅ 1 + 1 = 43
There is such a thing as non-positional notation, such as the Roman numeral system. 8. Perhaps, humankind
switched to positional notation because it’s easier to do basic operations (addition, multiplication,
etc.) on paper by hand.
Binary numbers can be added, subtracted and so on in the very same as taught in schools, but only 2
digits are available.
Binary numbers are bulky when represented in source code and dumps, so that is where the hexadecimal
numeral system can be useful. A hexadecimal radix uses the digits 0..9, and also 6 Latin characters: A..F.
Each hexadecimal digit takes 4 bits or 4 binary digits, so it’s very easy to convert from binary number to
hexadecimal and back, even manually, in one’s mind.
hexadecimal binary decimal
0 0000 0
1 0001 1
2 0010 2
3 0011 3
4 0100 4
5 0101 5
6 0110 6
7 0111 7
8 1000 8
9 1001 9
A 1010 10
B 1011 11
C 1100 12
D 1101 13
E 1110 14
(Binary-Decimal işlemlerinde çarpanlara(kombinasyon) ayırıp 10'un üssü yerine 2'nin üssü şeklinde yazıyorsun.)
7Random-Access Memory = RAM
9GNU Compiler Collection = GCC
Decimal numbers are usually written as is, i.e., 1234. Some assemblers allow an identifier on decimal
radix numbers, in which the number would be written with a ”d” suffix: 1234d.
Binary numbers are sometimes prepended with the ”0b” prefix: 0b100110111 (GCC9 has a non-standard
language extension for this10). There is also another way: using a ”b” suffix, for example: 100110111b.
This book tries to use the ”0b” prefix consistently throughout the book for binary numbers.
Hexadecimal numbers are prepended with ”0x” prefix in C/C++ and other PLs: 0x1234ABCD. Alternatively,
they are given a ”h” suffix: 1234ABCDh. This is common way of representing them in assemblers and
debuggers. In this convention, if the number is started with a Latin (A..F) digit, a 0 is added at the
beginning: 0ABCDEFh. There was also convention that was popular in 8-bit home computers era, using $
prefix, like $ABCD.
Octal Radix
Another numeral system heavily used in the past of computer programming is octal. In octal there are 8
digits (0..7), and each is mapped to 3 bits, so it’s easy to convert numbers back and forth. It has been
superseded by the hexadecimal system almost everywhere, but, surprisingly, there is a *NIX utility, used
often by many people, which takes octal numbers as argument: chmod.
As many *NIX users know, chmod argument can be a number of 3 digits. The first digit represents the
rights of the owner of the file (read, write and/or execute), the second is the rights for the group to which
the file belongs, and the third is for everyone else. Each digit that chmod takes can be represented in
binary form:
decimal binary meaning
7 111 rwx
6 110 rw-
5 101 r-x
4 100 r--
3 011 -wx
2 010 -w-
1 001 --x
0 000 ---
So each bit is mapped to a flag: read/write/execute.
The importance of chmod here is that the whole number in argument can be represented as octal number.
Let’s take, for example, 644. When you run chmod 644 file, you set read/write permissions for owner,
read permissions for group and again, read permissions for everyone else. If we convert the octal number
644 to binary, it would be 110100100, or, in groups of 3 bits, 110 100 100.
Now we see that each triplet describe permissions for owner/group/others: first is rw-, second is r-- and
third is r--.
The octal numeral system was also popular on old computers like PDP-8, because word there could be 12,
24 or 36 bits, and these numbers are all divisible by 3, so the octal system was natural in that environment.
Nowadays, all popular computers employ word/address sizes of 16, 32 or 64 bits, and these numbers are
all divisible by 4, so the hexadecimal system is more natural there. (hexadecimal uses 4 bits/ 4 digit system)
12Portable Executable = PE
Divisibility
When you see a decimal number like 120, you can quickly deduce that it’s divisible by 10, because the
last digit is zero. In the same way, 123400 is divisible by 100, because the two last digits are zeros.
Likewise, the hexadecimal number 0x1230 is divisible by 0x10 (or 16), 0x123000 is divisible by 0x1000
(or 4096), etc.
The binary number 0b1000101000 is divisible by 0b1000 (8), etc.
This property can often be used to quickly realize if an address or a size of some block in memory is padded
to some boundary. For example, sections in PE12 files are almost always started at addresses ending with
3 hexadecimal zeros: 0x41000, 0x10001000, etc. The reason behind this is the fact that almost all PE
sections are padded to a boundary of 0x1000 (4096) bytes.
RET inctruction returns execution to the caller.








6